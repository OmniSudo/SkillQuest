@using global::System
@using global::System.Runtime.CompilerServices
@using global::System.Threading.Tasks
@using Sandbox;
@using Sandbox.SQ.System.Login
@using Sandbox.UI;
@inherits PanelComponent

@namespace Sandbox.SQ.UI.Character

<root>
	<div class="character-select">
		<div class="character-list">
			@foreach ( var character in Characters ) {
				<button class="character-selection" onclick=@( ( ) => { CharacterButtonOnClick( character ); } )>
					@character.Name
				</button>
			}
		</div>
		<div class="selected-character">

		</div>
	</div>

</root>

@code {
	public CharacterInfo [ ] Characters { get; set; }

	private TaskCompletionSource< CharacterInfo > _tcs = new();

	private void CharacterButtonOnClick ( CharacterInfo character ) {
		if ( !_tcs.Task.IsCompleted ) _tcs.SetResult( character );
		DestroyGameObject();
	}

	protected override int BuildHash ( ) {
		return HashCode.Combine( Characters );
	}

	public static Task< CharacterInfo > SelectCharacter ( CharacterInfo [ ] characters ) {
		Log.Info( "Spawning character select UI" );
		var tcs = new TaskCompletionSource< CharacterInfo >();

		Sandbox.SkillQuest.SH.CreateOnMainThread( SkillQuest.CL.UI.GameObject, name: "Character Selector" ).ContinueWith(
			t => {
				var cs = t.Result.AddComponent< CharacterSelect >();
				cs.Characters = characters;
				cs._tcs.Task.ContinueWith( tt => { tcs.SetResult( tt.Result ); } );
			}
		);

		return tcs.Task;
	}

	protected override void OnDestroy ( ) {
		if ( !_tcs.Task.IsCompleted ) _tcs.SetResult( null );
		base.OnDestroy();
	}

}
